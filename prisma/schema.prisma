
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Barber {
  id           String        @id @default(cuid())
  name         String
  email        String?       @unique
  bio          String?
  imageUrl     String?
  appointments Appointment[]
  services     BarbersOnServices[]
  availability Availability[]
  blockouts    TimeBlockout[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Service {
  id          String     @id @default(cuid())
  name        String
  description String?
  price       Decimal    @db.Decimal(10, 2)
  duration    Int        // Duration in minutes
  imageUrl    String?
  barbers     BarbersOnServices[]
  appointments Appointment[]
  active      Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model BarbersOnServices {
  barber      Barber     @relation(fields: [barberId], references: [id])
  barberId    String
  service     Service    @relation(fields: [serviceId], references: [id])
  serviceId   String
  price       Decimal?   @db.Decimal(10, 2) // Optional override of service price
  
  @@id([barberId, serviceId])
}

model Appointment {
  id                String            @id @default(cuid())
  referenceNumber   String            @unique
  startTime         DateTime
  endTime           DateTime
  status            AppointmentStatus @default(PENDING)
  notes             String?
  
  customerName      String
  customerEmail     String
  customerPhone     String?
  
  barber            Barber            @relation(fields: [barberId], references: [id])
  barberId          String
  
  service           Service           @relation(fields: [serviceId], references: [id])
  serviceId         String
  
  emailReminderSent Boolean          @default(false)
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

model Availability {
  id         String    @id @default(cuid())
  barber     Barber    @relation(fields: [barberId], references: [id])
  barberId   String
  dayOfWeek  Int       // 0-6, where 0 is Sunday
  startTime  String    // Format: "HH:MM" 
  endTime    String    // Format: "HH:MM"
  isWorking  Boolean   @default(true)
  
  @@unique([barberId, dayOfWeek])
}

model TimeBlockout {
  id            String          @id @default(cuid())
  barber        Barber          @relation(fields: [barberId], references: [id])
  barberId      String
  startTime     DateTime
  endTime       DateTime
  reason        String?
  recurring     RecurringType?
  occurrences   Int?            // Only used if recurring is not null
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

enum RecurringType {
  WEEKLY
  BIWEEKLY
  MONTHLY
}

model Settings {
  id                       String   @id @default(cuid())
  shopName                 String   @default("Premium Barber Shop")
  shopAddress              String?
  shopPhone                String?
  shopEmail                String?
  shopHoursStart           String   @default("09:00") // Format: "HH:MM"
  shopHoursEnd             String   @default("18:00") // Format: "HH:MM"
  timeSlotInterval         Int      @default(30)      // Default 30-minute slots
  minAdvanceBookingHours   Int      @default(1)       // How many hours ahead customers must book
  maxAdvanceBookingDays    Int      @default(30)      // How many days ahead customers can book
  reminderHours            Int      @default(24)      // Send reminder 24 hours before appointment
  emailConfirmationEnabled Boolean  @default(true)
  emailReminderEnabled     Boolean  @default(true)
  updatedAt                DateTime @updatedAt
}